plugins {
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id "application"
    id "java"
    id "net.ltgt.apt-eclipse" version "0.21"
    id "net.ltgt.apt-idea" version "0.21"
    id "com.bmuschko.docker-remote-api" version "3.6.1"
}

apply from: "$rootDir/gradle/versioning.gradle"

group "ch.so.agi.ili2gpkg"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
    maven { url "http://jars.interlis.ch/" }    
}

dependencyManagement {
    imports {
        mavenBom 'io.micronaut:micronaut-bom:1.1.2'
    }
}

configurations {
    developmentOnly 
}

dependencies {
    annotationProcessor "io.micronaut:micronaut-graal"
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut:micronaut-inject"
    compile "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-runtime"
    compile "io.micronaut:micronaut-http-server-netty"
    compileOnly "com.oracle.substratevm:svm"
    developmentOnly "io.micronaut:micronaut-runtime-osx"
    runtime "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testCompile "org.junit.jupiter:junit-jupiter-api"
    testCompile "io.micronaut.test:micronaut-test-junit5"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
    
    compile "io.micronaut:micronaut-views"
    compile "org.thymeleaf:thymeleaf:3.0.11.RELEASE"    
    compile "ch.interlis:ili2gpkg:4.1.0"    
    compile "ch.ehi:ehibasics:1.2.0"
    compile "org.xerial:sqlite-jdbc:3.27.2.1"
}

test.classpath += configurations.developmentOnly

mainClassName = "ch.so.agi.ili2gpkg.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote', '-Dmicronaut.io.watch.restart=true', '-Dmicronaut.io.watch.paths=src/main')
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

// version.txt file
import java.text.SimpleDateFormat

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

task versionTxt()  {
    outputs.upToDateWhen { false }
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${getCheckedOutGitCommitHash()}
Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
Application-name: ilivalidator-web-service
"""
    }
}
task copyVersionTxt(type: Copy) {
    from "version.txt"
    into "src/main/resources/static/resources/"
}
copyVersionTxt.dependsOn(versionTxt)
build.dependsOn(copyVersionTxt)
classes.dependsOn(copyVersionTxt)

// creat java docker image
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerLogsContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer.ExposedPort

docker {
    registryCredentials {
        username = System.env.dockerRegistryUser
        password = System.env.dockerRegistryPass
    }
}

task buildDockerImage(type: DockerBuildImage) {
    description = "Build docker image."
    inputDir = project.rootDir
    dockerFile = file("Dockerfile.jvm")
    tags = ["sogis/ili2gpkg-web-service-jvm:"+version, "sogis/ili2gpkg-web-service-jvm:latest", "gcr.io/ili2gpkg/ili2gpkg-web-service-jvm:"+version, "gcr.io/ili2gpkg/ili2gpkg-web-service-jvm:latest"]
    labels = ["ili2gpkg-web-service.created": new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()), 
            "ili2gpkg-web-service.git_commit": getCheckedOutGitCommitHash(), 
            "ili2gpkg-web-service.travis_build": version]
}

task pushDockerImage_One(dependsOn: 'buildDockerImage', type: DockerPushImage) {
    description = "Push docker image to hub.docker.com (only if docker tests were successful)."
    imageName = buildDockerImage.tags[0]
}

task pushDockerImage_Two(dependsOn: 'buildDockerImage', type: DockerPushImage) {
    description = "Push docker image to hub.docker.com (only if docker tests were successful)."
    imageName = buildDockerImage.tags[1]
}

task pushDockerImages() {
    doFirst{
        println "Push Docker Images"
    }
}

pushDockerImages.dependsOn {
    tasks.findAll { task -> task.name.startsWith('pushDockerImage_') }
}
